From ee5f48925240e7341117898c70fb918605235cd6 Mon Sep 17 00:00:00 2001
From: Alexandre Jutras <alexandre.jutras@linaro.org>
Date: Mon, 13 Jan 2020 14:49:45 -0500
Subject: [PATCH 3/5] [OCDM] Implement Secure Data Path

Signed-off-by: Alexandre Jutras <alexandre.jutras@linaro.org>
---
 OpenCDMi/FrameworkRPC.cpp | 30 +++++++++++++++++++++++++++++-
 1 file changed, 29 insertions(+), 1 deletion(-)

diff --git a/OpenCDMi/FrameworkRPC.cpp b/OpenCDMi/FrameworkRPC.cpp
index 8d07a12..04fcecf 100644
--- a/OpenCDMi/FrameworkRPC.cpp
+++ b/OpenCDMi/FrameworkRPC.cpp
@@ -18,6 +18,9 @@
 #include "CENCParser.h"
 
 #include <ocdm/open_cdm.h>
+#include "helper/socket_server_helper.h"
+
+#define ENABLE_SECURE_DATA_PATH 1
 
 extern "C" {
 
@@ -258,6 +261,14 @@ namespace Plugin {
                 private:
                     virtual uint32_t Worker() override
                     {
+                        int secureFd = -1;
+                        uint32_t secureSize = 0;
+#ifdef ENABLE_SECURE_DATA_PATH
+                        TRACE_L1("Waiting socket connection for SDP (%s)", Name().c_str());
+                        if(_socket.Connect(0) != 0) {
+                            TRACE_L1("Cannot accept the socket connection for SDP");
+                        }
+#endif
 
                         while (IsRunning() == true) {
 
@@ -266,6 +277,13 @@ namespace Plugin {
 
                             RequestConsume(Core::infinite);
 
+#ifdef ENABLE_SECURE_DATA_PATH
+                            // Receive secure FD
+                            if (_socket.ReceiveFileDescriptor(secureFd, secureSize) != 0) {
+                                TRACE_L1("Cannot receive secure file descriptor");
+                            }
+#endif
+
                             if (IsRunning() == true) {
                                 uint8_t keyIdLength = 0;
                                 const uint8_t* keyIdData = KeyId(keyIdLength);
@@ -285,7 +303,10 @@ namespace Plugin {
                                     &clearContent,
                                     keyIdLength,
                                     keyIdData,
-                                    InitWithLast15());
+                                    InitWithLast15(),
+                                    secureFd,
+                                    secureSize);
+
                                 if ((cr == 0) && (clearContentSize != 0)) {
                                     if (clearContentSize != BytesWritten()) {
                                         TRACE_L1("Returned clear sample size (%d) differs from encrypted buffer size (%d)", clearContentSize, BytesWritten());
@@ -302,6 +323,10 @@ namespace Plugin {
                                 // Whatever the result, we are done with the buffer..
                                 Consumed();
                             }
+
+#ifdef ENABLE_SECURE_DATA_PATH
+                            _socket.CloseFileDescriptor(secureFd);
+#endif
                         }
 
                         return (Core::infinite);
@@ -312,6 +337,9 @@ namespace Plugin {
                     CDMi::IMediaKeySessionExt* _mediaKeysExt;
                     uint8_t* _sessionKey;
                     uint32_t _sessionKeyLength;
+#ifdef ENABLE_SECURE_DATA_PATH
+                    SocketServer _socket;
+#endif
                 };
 
                 // IMediaKeys defines the MediaKeys interface.
-- 
2.17.1

